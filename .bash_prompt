#!/usr/bin/env bash

prompt_git() {
	local s='';
	local branchName='';

	# Check if the current directory is in a Git repository.
	git rev-parse --is-inside-work-tree &>/dev/null || return;

	# Check for what branch we’re on.
	# Get the short symbolic ref. If HEAD isn’t a symbolic ref, get a
	# tracking remote branch or tag. Otherwise, get the
	# short SHA for the latest commit, or give up.
	branchName="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
		git describe --all --exact-match HEAD 2> /dev/null || \
		git rev-parse --short HEAD 2> /dev/null || \
		echo '(unknown)')";

	# Thanks, @paulirish!
	# https://github.com/paulirish/dotfiles/blob/dd33151f/.bash_prompt#L110-L123
	repoUrl="$(git config --get remote.origin.url)";
	if grep -q 'chromium/src.git' <<< "${repoUrl}"; then
		s+='*';
	else
		# Check for uncommitted changes in the index.
		if ! $(git diff --quiet --ignore-submodules --cached); then
			s+='+';
		fi;
		# Check for unstaged changes.
		if ! $(git diff-files --quiet --ignore-submodules --); then
			s+='!';
		fi;
		# Check for untracked files.
		if [ -n "$(git ls-files --others --exclude-standard)" ]; then
			s+='?';
		fi;
		# Check for stashed files.
		if $(git rev-parse --verify refs/stash &>/dev/null); then
			s+='$';
		fi;
	fi;

	[ -n "${s}" ] && s=" [${s}]";

	echo -e "${1}${branchName}${2}${3}${s}";
}

tput sgr0; # reset colors
bold=$(tput bold);
reset=$(tput sgr0);
blue=$(tput setaf 33);
green=$(tput setaf 76);
purple=$(tput setaf 129);
red=$(tput setaf 160);
white=$(tput setaf 15);
yellow=$(tput setaf 220);

# Highlight the user name when logged in as root.
if [[ "${USER}" == "root" ]]; then
	userStyle="${red}";
else
	userStyle="${green}";
fi;

# Highlight the hostname when connected via SSH.
if [[ "${SSH_TTY}" ]]; then
	hostStyle="${bold}${red}";
else
	hostStyle="${green}";
fi;

# Set prompt
PS1="\[${bold}\]";
# username
PS1+="\[${userStyle}\]\u";
PS1+="\[${green}\]@";
 # host
PS1+="\[${hostStyle}\]\h: ";
# current working directory 
PS1+="\[${blue}\]\W";
# Git repository details
PS1+="\$(prompt_git \"\[${purple}\] git:(\[${red}\]\" \"\[${purple}\])\" \"\[${yellow}\]\")"; 

PS1+="\[${reset}\]\n";
# `$` (and reset color)
PS1+="\$ ";
export PS1;

PS2="\[${blue}\]→ \[${reset}\]";
export PS2;
